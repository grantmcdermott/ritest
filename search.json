[{"path":"http://grantmcdermott.com/ritest/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 ritest authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://grantmcdermott.com/ritest/articles/ritest.html","id":"example-i-toy-data","dir":"Articles","previous_headings":"","what":"Example I: Toy data","title":"Introduction to ritest","text":"first example rather naive implementation using base nkp dataset. Let’s say ’re interested yield effect ‘N’ (.e. nitrogen). want know whether inferential reasoning parameter robust using RI, opposed just relying parametric t-test p-value produced linear regression model. ’ll 1,000 simulations , just illustration, limit number parallel cores 2. (default parallel behaviour use half available cores user’s machine.) ‘verbose = TRUE’ argument simply prints results upon completion, including original regression model summary. simple case, parametric results appear hold well. original p-value 0.019 close equivalent rejection rate 0.021 get RI procedure. can also visualize result using dedicated plot method. function takes several arguments added customization. ’ll just show default plot, includes vertical lines denote simulated (case: 95 percent) rejection regions.  aside, note RI procedure tests standard two-sided null hypothesis zero. (case: H0: N1=0.) can specify different null hypothesis part resampvar string. example:  Note (probably ) estimated realistic model controls stratified (aka “blocked”) design original npk experiment. easily done, ’ll hold now since discussion strata provides nice segue next example.","code":"est = lm(yield ~ N + P + K, data = npk) est_ri = ritest(est, 'N', reps = 1e3, seed = 1234L, pcores = 2L, verbose = TRUE) #>  #> Running 1000 parallel RI simulations as forked processes across 2 CPU cores. #>  #> ****************** #> * ORIGINAL MODEL * #> ****************** #>  #> Call: #> lm(formula = yield ~ N + P + K, data = npk) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -9.2667 -3.6542  0.7083  3.4792  9.3333  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   54.650      2.205  24.784   <2e-16 *** #> N1             5.617      2.205   2.547   0.0192 *   #> P1            -1.183      2.205  -0.537   0.5974     #> K1            -3.983      2.205  -1.806   0.0859 .   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 5.401 on 20 degrees of freedom #> Multiple R-squared:  0.3342, Adjusted R-squared:  0.2343  #> F-statistic: 3.346 on 3 and 20 DF,  p-value: 0.0397 #>  #>  #> ****************** #> * RITEST RESULTS * #> ****************** #>  #>           Call: lm(formula = yield ~ N + P + K, data = npk) #>    Res. var(s): N1 #>             H0: N1=0 #>      Num. reps: 1000 #> ────────────────────────────────────────────────────────────────────────────────  #>   T(obs)         c         n     p=c/n     SE(p)   CI 2.5%  CI 97.5%   #>    5.617        21      1000     0.021  0.007462  0.008726   0.03327   #> ────────────────────────────────────────────────────────────────────────────────  #> Note: Confidence interval is with respect to p=c/n.  #> Note: c = #{|T| >= |T(obs)|} plot(est_ri) plot(ritest(est, 'N<=2', reps = 1e3, seed = 1234L, pcores = 2L))"},{"path":"http://grantmcdermott.com/ritest/articles/ritest.html","id":"example-ii-real-life-data","dir":"Articles","previous_headings":"","what":"Example II: Real-life data","title":"Introduction to ritest","text":"second example provide realistic use-case, need account stratified clustered research design. particular, ’ll replicate real-life experiment David McKenzie describes helpful blog post original Stata -ritest- routine. dataset question derives randomized control trial supply chains Colombia, David kindly provided re-use package (see: ?colombia). key research question ’re trying answer whether treatment intervention (b_treat) led drop number days requiring visits Corabastos central market.1 Moreover, want know inference treatment effect robust RI.","code":""},{"path":"http://grantmcdermott.com/ritest/articles/ritest.html","id":"stata-implementation","dir":"Articles","previous_headings":"Example II: Real-life data","what":"Stata implementation","title":"Introduction to ritest","text":"benchmark, first recapitulate David’s Stata code output. won’t go details — essential thing know ’m going run 5,000 RI permutations pretty standard fixed-effect model, whilst accounting stratified clustered design experiment. (Aside: ’m also snipping Stata output, highlight main command result.) Like David, takes around 3 minutes run laptop.","code":". // This next line assumes you have exported the `colombia` dataset from R as a . // CSV for Stata to read, e.g. `write.csv(colombia, '~/colombia.csv', row.names = FALSE)` . insheet using \"~/colombia.csv\", comma clear  .  . timer on 1  .  . ritest b_treat _b[b_treat], cluster(b_block) strata(b_pair) reps(5e3) seed(546): /// > areg dayscorab b_treat b_dayscorab miss_b_dayscorab round2 round3, cluster(b_block) a(b_pair)  [snipped]         command:  areg dayscorab b_treat b_dayscorab miss_b_dayscorab round2 round3, cluster(b_block)                     a(b_pair)         _pm_1:  _b[b_treat]   res. var(s):  b_treat    Resampling:  Permuting b_treat Clust. var(s):  b_block      Clusters:  63 Strata var(s):  b_pair        Strata:  31  ------------------------------------------------------------------------------ T            |     T(obs)       c       n   p=c/n   SE(p) [95% Conf. Interval] -------------+----------------------------------------------------------------        _pm_1 |   -.180738     529    5000  0.1058  0.0043  .0974064   .1146569 ------------------------------------------------------------------------------ Note: Confidence interval is with respect to p=c/n. Note: c = #{|T| >= |T(obs)|}  .  . timer off 1 . timer list    1:    183.01 /        1 =     183.0150"},{"path":"http://grantmcdermott.com/ritest/articles/ritest.html","id":"r-implementation","dir":"Articles","previous_headings":"Example II: Real-life data","what":"R implementation","title":"Introduction to ritest","text":"Let’s replicate R using package. First, ’ll estimate save parametric model using fixest::feols(). Now, conduct RI model see whether key treatment variable (b_treat) sensitive imposed parametric constraints. Note can specify strata clusters additional arguments ritest(). Using random seed R Stata bit performance art. won’t get exactly results across two different languages. important thing note functionally equivalent (rejection probability 0.106 vs 0.104). importantly, can see inference effectiveness treatment study indeed sensitive RI. parametric p-value (0.024) much lower permuted rejection rate (0.104). , can plot results. ’s slight variation, plot histogram form use fill highlight 95% rejection region(s) instead vertical lines.","code":"data(\"colombia\")  library(fixest) ## For fast (high-dimensional) fixed-effects models  co_est =    feols(     dayscorab ~ b_treat + b_dayscorab + miss_b_dayscorab | b_pair + round2 + round3,      vcov = ~b_block, data = colombia     ) #> NOTE: 1,020 observations removed because of NA values (LHS: 1,020). co_est #> OLS estimation, Dep. Var.: dayscorab #> Observations: 2,346  #> Fixed-effects: b_pair: 31,  round2: 2,  round3: 2 #> Standard-errors: Clustered (b_block)  #>                   Estimate Std. Error  t value  Pr(>|t|)     #> b_treat          -0.180738   0.078174 -2.31201  0.024113 *   #> b_dayscorab       0.524761   0.029423 17.83478 < 2.2e-16 *** #> miss_b_dayscorab  0.603928   0.264174  2.28610  0.025678 *   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 1.91167     Adj. R2: 0.282038 #>                 Within R2: 0.266002 tic = Sys.time() ## timer on  co_ri = ritest(co_est, 'b_treat', cluster='b_block', strata='b_pair', reps=5e3, seed=546L)  toc = Sys.time() - tic ## timer off  ## Print the results co_ri #>  #>           Call: feols(fml = dayscorab ~ b_treat + b_dayscorab + miss_b_dayscorab | b_pair + round2 + round3, data = colombia, vcov = ~b_block) #>    Res. var(s): b_treat #>             H0: b_treat=0 #>  Strata var(s): b_pair #>         Strata: 31 #> Cluster var(s): b_block #>       Clusters: 63 #>      Num. reps: 5000 #> ────────────────────────────────────────────────────────────────────────────────  #>   T(obs)         c         n     p=c/n     SE(p)   CI 2.5%  CI 97.5%   #>  -0.1807       520      5000     0.104  0.007102   0.09232    0.1157   #> ────────────────────────────────────────────────────────────────────────────────  #> Note: Confidence interval is with respect to p=c/n.  #> Note: c = #{|T| >= |T(obs)|} plot(co_ri, type = 'hist', highlight = 'fill')"},{"path":"http://grantmcdermott.com/ritest/articles/ritest.html","id":"benchmarks","dir":"Articles","previous_headings":"Example II: Real-life data","what":"Benchmarks","title":"Introduction to ritest","text":"One nice feature R implementation complete quickly. Instead taking 3 minutes, time 5,000 simulations take around 6 seconds. general observation, R implementation ritest() doesn’t yet offer functionality Stata version. example, doesn’t support external file resampling weights. However, appear lot (25x – 50x) faster might make suitable certain types problems.","code":"toc #> Time difference of 6.581697 secs"},{"path":[]},{"path":"http://grantmcdermott.com/ritest/articles/ritest.html","id":"regression-tables","dir":"Articles","previous_headings":"Extras and asides","what":"Regression tables","title":"Introduction to ritest","text":"Support regression tables enabled via ritest’s compatability modelsummary package. recommend displaying p-values instead default standard errors. particularly important comparing parametric model, .","code":"library(modelsummary)  msummary(list(lm = co_est, ritest = co_ri),           statistic = 'p.value',           ## These next arguments just make our comparison table look a bit nicer          coef_map = c('b_treat' = 'Treatment'),           gof_omit = 'Obs|R2|IC|Log|F',          notes = 'p-values shown in parentheses.')"},{"path":"http://grantmcdermott.com/ritest/articles/ritest.html","id":"formulas","dir":"Articles","previous_headings":"Extras and asides","what":"Formulas","title":"Introduction to ritest","text":"Formula interfaces supported don’t like writing variables (.e. resampvar /strata cluster arguments) strings. ’ll just use default number reps (.e. 100) drop random seed next example.","code":"ritest(co_est, ~b_treat, strata=~b_pair, cluster=~b_block) #>  #>           Call: feols(fml = dayscorab ~ b_treat + b_dayscorab + miss_b_dayscorab | b_pair + round2 + round3, data = colombia, vcov = ~b_block) #>    Res. var(s): b_treat #>             H0: b_treat=0 #>  Strata var(s): b_pair #>         Strata: 31 #> Cluster var(s): b_block #>       Clusters: 63 #>      Num. reps: 100 #> ────────────────────────────────────────────────────────────────────────────────  #>   T(obs)         c         n     p=c/n     SE(p)   CI 2.5%  CI 97.5%   #>  -0.1807         8       100      0.08   0.04485  0.006231    0.1538   #> ────────────────────────────────────────────────────────────────────────────────  #> Note: Confidence interval is with respect to p=c/n.  #> Note: c = #{|T| >= |T(obs)|}"},{"path":"http://grantmcdermott.com/ritest/articles/ritest.html","id":"ggplot2","dir":"Articles","previous_headings":"Extras and asides","what":"ggplot2","title":"Introduction to ritest","text":"don’t like default plot method prefer use ggplot2, ’s easily done. Just extract beta values return object.","code":"library(ggplot2)  ggplot(data.frame(betas = co_ri$betas), aes(betas)) +    geom_density() +   theme_minimal()"},{"path":"http://grantmcdermott.com/ritest/articles/ritest.html","id":"piping-workflows","dir":"Articles","previous_headings":"Extras and asides","what":"Piping workflows","title":"Introduction to ritest","text":"ritest package fully compatible piping workflows. might useful don’t feel like saving intermediate objects. Uncomment code chunk see example using new base R pipe (|>) introduced R 4.1.0. principal carry popular magrittr pipe (%>%).","code":"## Uncomment and run this code if you have R 4.1 or above # feols(yield ~ N + P + K | block, vcov = 'iid', data = npk) |> # model #   ritest('N', strata = 'block', reps = 1e3, seed = 99L) |>      # ritest #   plot()                                                        # plot"},{"path":"http://grantmcdermott.com/ritest/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Grant McDermott. Author, maintainer. Simon Heß. Contributor.","code":""},{"path":"http://grantmcdermott.com/ritest/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"McDermott G (2022). ritest: Randomisation Inference Testing. https://github.com/grantmcdermott/ritest, http://grantmcdermott.com/ritest.","code":"@Manual{,   title = {ritest: Randomisation Inference Testing},   author = {Grant McDermott},   year = {2022},   note = {https://github.com/grantmcdermott/ritest, http://grantmcdermott.com/ritest}, }"},{"path":"http://grantmcdermott.com/ritest/index.html","id":"ritest","dir":"","previous_headings":"","what":"Randomisation Inference Testing","title":"Randomisation Inference Testing","text":"Conduct randomization inference R model objects. R package port excellent -ritest- Stata routine Simon Heß. doesn’t (yet) try support features Stata version currently limited lm() fixest::feols() models. appear significantly faster, aims support variety model classes fully baked.","code":""},{"path":"http://grantmcdermott.com/ritest/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Randomisation Inference Testing","text":"","code":"# install.packages(\"remotes\") remotes::install_github(\"grantmcdermott/ritest\")"},{"path":"http://grantmcdermott.com/ritest/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Randomisation Inference Testing","text":"detailed walkthrough package provided introductory vignette. See vignette(\"ritest\"). quickstart, follows basic example using data randomized control trial (RCT) conducted Colombia. dataset provided package. First, use fixest::feols() function estimate parametric model. key treatment variable (b_treat) deemed statistically significant (p-value 0.024), even cluster standard errors. let’s see result robust randomization inference (RI). ’ll perform 1,000 RI permutations b_treat, whilst taking account stratified clustered experimental design underlying RCT. simulated p-value noticeably larger parametric one (0.107 vs 0.024), suggesting parametric model overstating effectiveness treatment. examples additional features — plotting, regression tables, etc. — please see introductory vignette.","code":"library(ritest)  ## This package library(fixest)  ## For fast (high-dimensional) fixed-effect regressions  data(\"colombia\")  ## Parametric model using fixest::feols() co_est =    feols(     dayscorab ~ b_treat + b_dayscorab | b_pair + miss_b_dayscorab + round2 + round3,      vcov = ~b_block, data = colombia     ) co_est #> OLS estimation, Dep. Var.: dayscorab #> Observations: 2,346  #> Fixed-effects: b_pair: 31,  miss_b_dayscorab: 2,  round2: 2,  round3: 2 #> Standard-errors: Clustered (b_block)  #>              Estimate Std. Error  t value  Pr(>|t|)     #> b_treat     -0.180738   0.078174 -2.31201  0.024113 *   #> b_dayscorab  0.524761   0.029423 17.83478 < 2.2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 1.91167     Adj. R2: 0.282038 #>                 Within R2: 0.21367 ritest(co_est, 'b_treat', strata='b_pair', cluster='b_block', reps=1e3, seed=1234) #>  #>           Call: feols(fml = dayscorab ~ b_treat + b_dayscorab + miss_b_dayscorab | b_pair + round2 + round3, data = colombia, vcov = ~b_block) #>    Res. var(s): b_treat #>             H0: b_treat=0 #>  Strata var(s): b_pair #>         Strata: 31 #> Cluster var(s): b_block #>       Clusters: 63 #>      Num. reps: 1000 #> ────────────────────────────────────────────────────────────────────────────────  #>   T(obs)         c         n     p=c/n     SE(p)   CI 2.5%  CI 97.5%   #>  -0.1807       107      1000     0.107   0.01609   0.08054    0.1335   #> ────────────────────────────────────────────────────────────────────────────────  #> Note: Confidence interval is with respect to p=c/n.  #> Note: c = #{|T| >= |T(obs)|}"},{"path":"http://grantmcdermott.com/ritest/index.html","id":"benchmarks","dir":"","previous_headings":"","what":"Benchmarks","title":"Randomisation Inference Testing","text":"generally observe speed increase 25x–50x compared Stata version. , see introductory vignette timed examples.","code":""},{"path":"http://grantmcdermott.com/ritest/index.html","id":"other-software","dir":"","previous_headings":"","what":"Other software","title":"Randomisation Inference Testing","text":"Apart Stata -ritest- routine, several packages conducting randomization inference R. example, ri package available nearly decade. recently, successor ri2 package extends upon original, updated syntax functionality. advantage ri2 integrates wider DeclareDesign suite R packages experimental empirical research design. enables researchers build RI experimental considerations incipient design process. hand, places restrictions conducting RI ex post quasi-experimental settings (e.g. study leverages natural experiment). example, can’t pass existing regression model object ri2::conduct_ri(), ritest designed . use case likely determine software optimal .","code":""},{"path":"http://grantmcdermott.com/ritest/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Randomisation Inference Testing","text":"software code contained within repository made available MIT license.","code":""},{"path":"http://grantmcdermott.com/ritest/reference/colombia.html","id":null,"dir":"Reference","previous_headings":"","what":"Vendor data from an RCT conducted in Bogota, Colombia. — colombia","title":"Vendor data from an RCT conducted in Bogota, Colombia. — colombia","text":"dataset preliminary version data described Iacovone McKenzie (forthcoming). conforms earlier blog post written one authors (McKenzie, 2017) contains data collected randomized controlled trial supply chains among fresh produce vendors Bogota, Colombia.","code":""},{"path":"http://grantmcdermott.com/ritest/reference/colombia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vendor data from an RCT conducted in Bogota, Colombia. — colombia","text":"","code":"colombia"},{"path":"http://grantmcdermott.com/ritest/reference/colombia.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Vendor data from an RCT conducted in Bogota, Colombia. — colombia","text":"data frame 3336 rows 8 variables: b_block business block (geographic identifier) b_pair randomly assigned treatment pairs (plus one triplet) b_treat treatment status (1 = yes, 2 = ) dayscorab number days week requiring visits Corabastos central market b_dayscorab baseline previous variable miss_b_dayscorab dummy missing baseline information (1 = yes, 2 = ) round2, round3 survey round dummies","code":""},{"path":"http://grantmcdermott.com/ritest/reference/colombia.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Vendor data from an RCT conducted in Bogota, Colombia. — colombia","text":"RCT studies impact purchase aggregation many microenterprises (: fruit vegetable vendors), enables reduction costly individual visits large central market. thanks David McKenzie sharing data.","code":""},{"path":"http://grantmcdermott.com/ritest/reference/colombia.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Vendor data from an RCT conducted in Bogota, Colombia. — colombia","text":"McKenzie, D. (2017) \"Finally, way easy randomization inference Stata!\", Development Impact (World Bank blog). https://blogs.worldbank.org/impactevaluations/finally-way--easy-randomization-inference-stata. Iacovone, L. McKenzie, D. (forthcoming) \"Shortening Supply Chains: Experimental Evidence Fruit Vegetable Vendors Bogota\", Economic Development Cultural Change. https://doi.org/10.1086/714050.","code":""},{"path":"http://grantmcdermott.com/ritest/reference/glance.ritest.html","id":null,"dir":"Reference","previous_headings":"","what":"Glance at an `ritest` object — glance.ritest","title":"Glance at an `ritest` object — glance.ritest","text":"Glance `ritest` object","code":""},{"path":"http://grantmcdermott.com/ritest/reference/glance.ritest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Glance at an `ritest` object — glance.ritest","text":"","code":"# S3 method for ritest glance(x, ...)"},{"path":"http://grantmcdermott.com/ritest/reference/glance.ritest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Glance at an `ritest` object — glance.ritest","text":"x object produced `ritest` function. ... Additional arguments. Currently ignored.","code":""},{"path":"http://grantmcdermott.com/ritest/reference/glance.ritest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Glance at an `ritest` object — glance.ritest","text":"data frame goodness--fit statistics conforms   `broom` package specifications.","code":""},{"path":"http://grantmcdermott.com/ritest/reference/glance.ritest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Glance at an `ritest` object — glance.ritest","text":"","code":"est = lm(yield ~ N + P + K, data = npk) est_ri = ritest(est, 'N', reps = 1e3, seed = 1234L, pcores = 2L) tidy(est_ri) #>   term estimate   std.error p.value    conf.low  conf.high #> 1   N1 5.616667 0.007461833   0.021 0.008726377 0.03327362 glance(est_ri) #>     H0 Num.Reps #> 1 N1=0     1000"},{"path":"http://grantmcdermott.com/ritest/reference/plot.ritest.html","id":null,"dir":"Reference","previous_headings":"","what":"A plot method for ritest objects — plot.ritest","title":"A plot method for ritest objects — plot.ritest","text":"Nice plots ritest objects.","code":""},{"path":"http://grantmcdermott.com/ritest/reference/plot.ritest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A plot method for ritest objects — plot.ritest","text":"","code":"# S3 method for ritest plot(   x,   type = c(\"density\", \"hist\"),   highlight = c(\"lines\", \"fill\", \"both\", \"none\"),   show_parm = FALSE,   breaks = \"auto\",   family = NULL,   ... )"},{"path":"http://grantmcdermott.com/ritest/reference/plot.ritest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A plot method for ritest objects — plot.ritest","text":"x ritest object. type Character. type plot want? highlight Character. want highlight H0 rejection regions distribution tails? show_parm Logical. highlight parametric H0 rejection regions ? breaks Character. Histogram plot . type breaks want? default method creates breaks standard R behaviour. can revert latter selecting NULL. family Character. font family. Defaults 'HersheySans' instead R's normal Arial plotting font. ... plot arguments. Currently ignored.","code":""},{"path":"http://grantmcdermott.com/ritest/reference/plot.ritest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A plot method for ritest objects — plot.ritest","text":"","code":"# ## Example 1: Basic functionality #  # First estimate a simple linaer regression on the base 'npk' dataset. For # this first example, we won't worry about strata or clusters, or other # experimental design complications. est = lm(yield ~ N + P + K, data = npk)  # Conduct RI on the 'N' (i.e. nitrogen) coefficient. We'll do 1,000 # simulations and, just for illustration, limit the number of parallel cores # to 2 (default is half of the available cores). The 'verbose = TRUE' # argument simply prints the results upon completion, including the original # regression model summary. est_ri = ritest(est, 'N', reps = 1e3, seed = 1234L, verbose = TRUE) #>  #> Running 1000 parallel RI simulations as forked processes across 1 CPU cores. #>  #> ****************** #> * ORIGINAL MODEL * #> ****************** #>  #> Call: #> lm(formula = yield ~ N + P + K, data = npk) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -9.2667 -3.6542  0.7083  3.4792  9.3333  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   54.650      2.205  24.784   <2e-16 *** #> N1             5.617      2.205   2.547   0.0192 *   #> P1            -1.183      2.205  -0.537   0.5974     #> K1            -3.983      2.205  -1.806   0.0859 .   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 5.401 on 20 degrees of freedom #> Multiple R-squared:  0.3342,\tAdjusted R-squared:  0.2343  #> F-statistic: 3.346 on 3 and 20 DF,  p-value: 0.0397 #>  #>  #> ****************** #> * RITEST RESULTS * #> ****************** #>  #>           Call: lm(formula = yield ~ N + P + K, data = npk) #>    Res. var(s): N1 #>             H0: N1=0 #>      Num. reps: 1000 #> ────────────────────────────────────────────────────────────────────────────────  #>   T(obs)         c         n     p=c/n     SE(p)   CI 2.5%  CI 97.5%   #>    5.617        29      1000     0.029  0.008733   0.01464   0.04336   #> ────────────────────────────────────────────────────────────────────────────────  #> Note: Confidence interval is with respect to p=c/n.  #> Note: c = #{|T| >= |T(obs)|}  #>   # Result: The RI rejection rate (0.021) is very similar to the parametric # p-value (0.019).  # We can plot the results and various options are available to customise the appearance. plot(est_ri)  plot(est_ri, type = 'hist')  # etc  # Aside: By default, ritest() conducts a standard two-sided test against a # sharp null hypothesis of zero. You can can specify other null hypotheses as # part of the 'resampvar' string argument. For example, a (left) one-sided # test... plot(ritest(est, 'N<=0', reps = 1e3, seed = 1234L, pcores = 2L))  # ... or, null values different from zero. plot(ritest(est, 'N=2', reps = 1e3, seed = 1234L, pcores = 2L))    # ## Example 2: Real-life example #  # Now that we've seen the basic functionality, here's a more realistic RI # example using data from a randomized control trial conducted in Colombia. # More details on the dataset -- kindly provided by the study authors -- can # be found in the accompanying helpfile (\"?colombia\"). The most important # thing to note is that we need to control for the stratified (aka \"blocked\") # and clustered experimental design.  data(\"colombia\")  # We'll use the fixest package to estimate our parametric regression model, # specifying the strata (here: treatment-control pairs) as fixed-effects and # clustering the standard errors by location (here: city blocks). library(fixest) co_est = feols(dayscorab ~ b_treat + b_dayscorab + miss_b_dayscorab |                  b_pair + round2 + round3,                vcov = ~b_block, data = colombia) #> NOTE: 1,020 observations removed because of NA values (LHS: 1,020). co_est #> OLS estimation, Dep. Var.: dayscorab #> Observations: 2,346  #> Fixed-effects: b_pair: 31,  round2: 2,  round3: 2 #> Standard-errors: Clustered (b_block)  #>                   Estimate Std. Error  t value  Pr(>|t|)     #> b_treat          -0.180738   0.078174 -2.31201  0.024113 *   #> b_dayscorab       0.524761   0.029423 17.83478 < 2.2e-16 *** #> miss_b_dayscorab  0.603928   0.264174  2.28610  0.025678 *   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 1.91167     Adj. R2: 0.282038 #>                 Within R2: 0.266002  # Run RI on the 'b_treat' variable, specifying the strata and clusters. co_ri = ritest(co_est, 'b_treat', strata='b_pair', cluster='b_block',                reps=1e3, seed=123L) co_ri #>  #>           Call: feols(fml = dayscorab ~ b_treat + b_dayscorab + miss_b_dayscorab | b_pair + round2 + round3, data = colombia, vcov = ~b_block) #>    Res. var(s): b_treat #>             H0: b_treat=0 #>  Strata var(s): b_pair #>         Strata: 31 #> Cluster var(s): b_block #>       Clusters: 63 #>      Num. reps: 1000 #> ────────────────────────────────────────────────────────────────────────────────  #>   T(obs)         c         n     p=c/n     SE(p)   CI 2.5%  CI 97.5%   #>  -0.1807       110      1000      0.11   0.01628   0.08322    0.1368   #> ────────────────────────────────────────────────────────────────────────────────  #> Note: Confidence interval is with respect to p=c/n.  #> Note: c = #{|T| >= |T(obs)|}  #>  plot(co_ri, type = 'hist', highlight = 'fill')   # This time, the RI rejection rate (0.11) is noticeably higher than the # parametric p-value (0.024) from the regression model."},{"path":"http://grantmcdermott.com/ritest/reference/print.ritest.html","id":null,"dir":"Reference","previous_headings":"","what":"A print method for ritest objects — print.ritest","title":"A print method for ritest objects — print.ritest","text":"Printed display ritest objects. Tries mimic display   equivalent Stata routine.","code":""},{"path":"http://grantmcdermott.com/ritest/reference/print.ritest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A print method for ritest objects — print.ritest","text":"","code":"# S3 method for ritest print(x, verbose = FALSE, ...)"},{"path":"http://grantmcdermott.com/ritest/reference/print.ritest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A print method for ritest objects — print.ritest","text":"x ritest object. verbose Logical. display original model summary ? Default FALSE. ... Currently ignored.","code":""},{"path":"http://grantmcdermott.com/ritest/reference/print.ritest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A print method for ritest objects — print.ritest","text":"","code":"# ## Example 1: Basic functionality #  # First estimate a simple linaer regression on the base 'npk' dataset. For # this first example, we won't worry about strata or clusters, or other # experimental design complications. est = lm(yield ~ N + P + K, data = npk)  # Conduct RI on the 'N' (i.e. nitrogen) coefficient. We'll do 1,000 # simulations and, just for illustration, limit the number of parallel cores # to 2 (default is half of the available cores). The 'verbose = TRUE' # argument simply prints the results upon completion, including the original # regression model summary. est_ri = ritest(est, 'N', reps = 1e3, seed = 1234L, verbose = TRUE) #>  #> Running 1000 parallel RI simulations as forked processes across 1 CPU cores. #>  #> ****************** #> * ORIGINAL MODEL * #> ****************** #>  #> Call: #> lm(formula = yield ~ N + P + K, data = npk) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -9.2667 -3.6542  0.7083  3.4792  9.3333  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   54.650      2.205  24.784   <2e-16 *** #> N1             5.617      2.205   2.547   0.0192 *   #> P1            -1.183      2.205  -0.537   0.5974     #> K1            -3.983      2.205  -1.806   0.0859 .   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 5.401 on 20 degrees of freedom #> Multiple R-squared:  0.3342,\tAdjusted R-squared:  0.2343  #> F-statistic: 3.346 on 3 and 20 DF,  p-value: 0.0397 #>  #>  #> ****************** #> * RITEST RESULTS * #> ****************** #>  #>           Call: lm(formula = yield ~ N + P + K, data = npk) #>    Res. var(s): N1 #>             H0: N1=0 #>      Num. reps: 1000 #> ────────────────────────────────────────────────────────────────────────────────  #>   T(obs)         c         n     p=c/n     SE(p)   CI 2.5%  CI 97.5%   #>    5.617        29      1000     0.029  0.008733   0.01464   0.04336   #> ────────────────────────────────────────────────────────────────────────────────  #> Note: Confidence interval is with respect to p=c/n.  #> Note: c = #{|T| >= |T(obs)|}  #>   # Result: The RI rejection rate (0.021) is very similar to the parametric # p-value (0.019).  # We can plot the results and various options are available to customise the appearance. plot(est_ri)  plot(est_ri, type = 'hist')  # etc  # Aside: By default, ritest() conducts a standard two-sided test against a # sharp null hypothesis of zero. You can can specify other null hypotheses as # part of the 'resampvar' string argument. For example, a (left) one-sided # test... plot(ritest(est, 'N<=0', reps = 1e3, seed = 1234L, pcores = 2L))  # ... or, null values different from zero. plot(ritest(est, 'N=2', reps = 1e3, seed = 1234L, pcores = 2L))    # ## Example 2: Real-life example #  # Now that we've seen the basic functionality, here's a more realistic RI # example using data from a randomized control trial conducted in Colombia. # More details on the dataset -- kindly provided by the study authors -- can # be found in the accompanying helpfile (\"?colombia\"). The most important # thing to note is that we need to control for the stratified (aka \"blocked\") # and clustered experimental design.  data(\"colombia\")  # We'll use the fixest package to estimate our parametric regression model, # specifying the strata (here: treatment-control pairs) as fixed-effects and # clustering the standard errors by location (here: city blocks). library(fixest) co_est = feols(dayscorab ~ b_treat + b_dayscorab + miss_b_dayscorab |                  b_pair + round2 + round3,                vcov = ~b_block, data = colombia) #> NOTE: 1,020 observations removed because of NA values (LHS: 1,020). co_est #> OLS estimation, Dep. Var.: dayscorab #> Observations: 2,346  #> Fixed-effects: b_pair: 31,  round2: 2,  round3: 2 #> Standard-errors: Clustered (b_block)  #>                   Estimate Std. Error  t value  Pr(>|t|)     #> b_treat          -0.180738   0.078174 -2.31201  0.024113 *   #> b_dayscorab       0.524761   0.029423 17.83478 < 2.2e-16 *** #> miss_b_dayscorab  0.603928   0.264174  2.28610  0.025678 *   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 1.91167     Adj. R2: 0.282038 #>                 Within R2: 0.266002  # Run RI on the 'b_treat' variable, specifying the strata and clusters. co_ri = ritest(co_est, 'b_treat', strata='b_pair', cluster='b_block',                reps=1e3, seed=123L) co_ri #>  #>           Call: feols(fml = dayscorab ~ b_treat + b_dayscorab + miss_b_dayscorab | b_pair + round2 + round3, data = colombia, vcov = ~b_block) #>    Res. var(s): b_treat #>             H0: b_treat=0 #>  Strata var(s): b_pair #>         Strata: 31 #> Cluster var(s): b_block #>       Clusters: 63 #>      Num. reps: 1000 #> ────────────────────────────────────────────────────────────────────────────────  #>   T(obs)         c         n     p=c/n     SE(p)   CI 2.5%  CI 97.5%   #>  -0.1807       110      1000      0.11   0.01628   0.08322    0.1368   #> ────────────────────────────────────────────────────────────────────────────────  #> Note: Confidence interval is with respect to p=c/n.  #> Note: c = #{|T| >= |T(obs)|}  #>  plot(co_ri, type = 'hist', highlight = 'fill')   # This time, the RI rejection rate (0.11) is noticeably higher than the # parametric p-value (0.024) from the regression model."},{"path":"http://grantmcdermott.com/ritest/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. generics glance, tidy","code":""},{"path":"http://grantmcdermott.com/ritest/reference/ritest.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform randomization inference on a model object — ritest","title":"Perform randomization inference on a model object — ritest","text":"Perform randomization inference (RI) testing model object, e.g.   coefficient linear regression model. tries mimic `-ritest-`   Stata routine (Heß, 2017) design functionality. package   quite experimental subset functionality currently   supported. However, appear significantly faster.","code":""},{"path":"http://grantmcdermott.com/ritest/reference/ritest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform randomization inference on a model object — ritest","text":"","code":"ritest(   object,   resampvar,   reps = 100,   strata = NULL,   cluster = NULL,   level = 0.95,   parallel = TRUE,   ptype = c(\"auto\", \"fork\", \"psock\"),   pcores = NULL,   stack = NULL,   stack_lim = 1L,   seed = NULL,   pb = FALSE,   verbose = FALSE,   ... )"},{"path":"http://grantmcdermott.com/ritest/reference/ritest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform randomization inference on a model object — ritest","text":"object Model object containing `resampvar` variable. present, `stats::lm` `fixest::feols` models supported. resampvar Character one-sided formula. variable (coefficient) want perform RI . default, RI procedure conduct standard two-sided test sharp null hypothesis zero (.e. H0: resampvar = 0). null hypotheses may specified part character string. must take form resampled variable, followed ()equality sign, number. example 'x>=0' 'x<=0' yield respective one-sided tests zero null. Similarly, can test values zero (e.g. 'x=1' 'x>=1'). However, note multiple multiple comparison tests (e.g. 'x1-x2=0') yet supported. See Examples. reps Integer. number repetitions (permutation draws) RI simulation. Default 100, probably want . Young (2019) finds rejection rates stabilise around 2,000 draws. strata Character one-sided formula. Permute `resampvar` within strata (AKA blocks)? See Details Examples . cluster Character one-sided formula. Keep `resampvar` constant within clusters? See Details Examples . level Numeric. desired confidence level. Default 0.95. parallel Logical. permuted fits executed parallel? Default TRUE, additional options passed `ptype` `pcores` arguments. ptype Character. type parallel strategy used? default behaviour Linux Mac parallel forking (\"fork\"), Windows revert parallel sockets (\"psock\"). Note forking efficient, unavailable Windows. pcores Integer. many parallel cores used? none provided, default half total available CPU cores user's machine. stack Logical. permuted data stacked memory , rather recalculated iteration? Stacking takes advantage vectorisation thus efficient. (also helps ensure reproducibility results generated parallel --- see note random-number generation .) require additional memory. explicit choice provided, function automatically stack long implies additional memory overhead less `stack_lim` argument. Note stacking relevant least one `strata` `cluster` defined. stack_lim Numeric. memory limit (gigabytes) determining whether permuted data stacked memory ahead time? Default 1 GB. probably want increase working large dataset lots RAM. seed Integer. Random seed reproducible results. Note choice parallel behaviour can alter results even using seed. See Note random number generation . pb Logical. Display progress bar? Default FALSE. Progress bars can add surprising amount computational overhead iterative functions. therefore set number updating steps --- .e. via `nout` argument [pbapply::pboptions()] --- 5, limit kind overhead event user invokes `pb = TRUE` argument. verbose Logical. Display underlying model `object` summary `ritest` return value? Default `FALSE`. ... Additional arguments. Currently ignored.","code":""},{"path":"http://grantmcdermott.com/ritest/reference/ritest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform randomization inference on a model object — ritest","text":"list object class `ritest`. Default print plotting methods   supported.","code":""},{"path":"http://grantmcdermott.com/ritest/reference/ritest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform randomization inference on a model object — ritest","text":"function experimental functionality still quite   limited. Albeit, support likely use case RI   regression model, .e. permutation testing coefficient value. Present   limitations include: `lm` `fixest::feols` model objects   supported; one permutation (RI) test allowed; one strata   /cluster variable, respectively, can supplied. hope resolve   limitations time permits.","code":""},{"path":"http://grantmcdermott.com/ritest/reference/ritest.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Perform randomization inference on a model object — ritest","text":"use parallelism computation introduces well-known   complications respect random number generation (RNG). See   vignette accompanying `parallel` package discussion.   `ritest()` function adopts various best practices facilitate reliably   reproducible results, irrespective choice parallel strategy.   include use \"L'Ecuyer-CMRG\" RNG kind default behaviour   \"stacking\" permuted results memory passing   fitting stage randomization inference routine (fitting   still done parallel). briefly dwell latter, note   stacking behaviour similar --- nearly wrote \"parallels\" ---   approach adopted `boot` packages trade RNG   parallelism reproducibility. phrasing   `parallel` vignette: \"One way avoid difficulties (  possible) randomization master process\" (p. 5). upshot running `ritest()` given set arguments   generally yield , reproducible results regardless   run. true even users turn default parallel   behaviour function back , whether change   `ptype` argument \"psock\" \"fork\" back . However,   guaranteed every scenario. Perhaps obvious case   `ritest()` run without declared strata clusters. (Reason:   Stacking simple case turned yields efficiency   gains.) case, RNG stream sensitive _number_   available cores user's computer. Two parallel cores yield   slightly different result four cores, six cores, etc. course,   users can always ensure perfect reproducibility explicitly defining   number required cores `ritest()` call via `pcores` argument.   Stepping back, focus reproducible exactitude rather misses   point exercise like randomization inference testing. Much important   running enough permutation trials rejection rates stable   minor differences due different RNG seeds moot. Remember,   ultimate goal inference (research) simply generate   reproducible results specific set circumstances. Rather,   generate consistent insights hold even varying   circumstances.","code":""},{"path":"http://grantmcdermott.com/ritest/reference/ritest.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Perform randomization inference on a model object — ritest","text":"Simon Heß (2017). Robust Randomization inference   Stata: guide software, Stata Journal, 17, Number 3, pp. 630--651 Alwyn Young (2019). Channeling Fisher: Randomization   Tests Statistical Insignificance Seemingly Significant   Experimental Results, Quarterly Journal Economics, 134, Issue 2,   pp. 557--598","code":""},{"path":[]},{"path":"http://grantmcdermott.com/ritest/reference/ritest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform randomization inference on a model object — ritest","text":"","code":"# ## Example 1: Basic functionality #  # First estimate a simple linaer regression on the base 'npk' dataset. For # this first example, we won't worry about strata or clusters, or other # experimental design complications. est = lm(yield ~ N + P + K, data = npk)  # Conduct RI on the 'N' (i.e. nitrogen) coefficient. We'll do 1,000 # simulations and, just for illustration, limit the number of parallel cores # to 2 (default is half of the available cores). The 'verbose = TRUE' # argument simply prints the results upon completion, including the original # regression model summary. est_ri = ritest(est, 'N', reps = 1e3, seed = 1234L, verbose = TRUE) #>  #> Running 1000 parallel RI simulations as forked processes across 1 CPU cores. #>  #> ****************** #> * ORIGINAL MODEL * #> ****************** #>  #> Call: #> lm(formula = yield ~ N + P + K, data = npk) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -9.2667 -3.6542  0.7083  3.4792  9.3333  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   54.650      2.205  24.784   <2e-16 *** #> N1             5.617      2.205   2.547   0.0192 *   #> P1            -1.183      2.205  -0.537   0.5974     #> K1            -3.983      2.205  -1.806   0.0859 .   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 5.401 on 20 degrees of freedom #> Multiple R-squared:  0.3342,\tAdjusted R-squared:  0.2343  #> F-statistic: 3.346 on 3 and 20 DF,  p-value: 0.0397 #>  #>  #> ****************** #> * RITEST RESULTS * #> ****************** #>  #>           Call: lm(formula = yield ~ N + P + K, data = npk) #>    Res. var(s): N1 #>             H0: N1=0 #>      Num. reps: 1000 #> ────────────────────────────────────────────────────────────────────────────────  #>   T(obs)         c         n     p=c/n     SE(p)   CI 2.5%  CI 97.5%   #>    5.617        29      1000     0.029  0.008733   0.01464   0.04336   #> ────────────────────────────────────────────────────────────────────────────────  #> Note: Confidence interval is with respect to p=c/n.  #> Note: c = #{|T| >= |T(obs)|}  #>   # Result: The RI rejection rate (0.021) is very similar to the parametric # p-value (0.019).  # We can plot the results and various options are available to customise the appearance. plot(est_ri)  plot(est_ri, type = 'hist')  # etc  # Aside: By default, ritest() conducts a standard two-sided test against a # sharp null hypothesis of zero. You can can specify other null hypotheses as # part of the 'resampvar' string argument. For example, a (left) one-sided # test... plot(ritest(est, 'N<=0', reps = 1e3, seed = 1234L, pcores = 2L))  # ... or, null values different from zero. plot(ritest(est, 'N=2', reps = 1e3, seed = 1234L, pcores = 2L))    # ## Example 2: Real-life example #  # Now that we've seen the basic functionality, here's a more realistic RI # example using data from a randomized control trial conducted in Colombia. # More details on the dataset -- kindly provided by the study authors -- can # be found in the accompanying helpfile (\"?colombia\"). The most important # thing to note is that we need to control for the stratified (aka \"blocked\") # and clustered experimental design.  data(\"colombia\")  # We'll use the fixest package to estimate our parametric regression model, # specifying the strata (here: treatment-control pairs) as fixed-effects and # clustering the standard errors by location (here: city blocks). library(fixest) co_est = feols(dayscorab ~ b_treat + b_dayscorab + miss_b_dayscorab |                  b_pair + round2 + round3,                vcov = ~b_block, data = colombia) #> NOTE: 1,020 observations removed because of NA values (LHS: 1,020). co_est #> OLS estimation, Dep. Var.: dayscorab #> Observations: 2,346  #> Fixed-effects: b_pair: 31,  round2: 2,  round3: 2 #> Standard-errors: Clustered (b_block)  #>                   Estimate Std. Error  t value  Pr(>|t|)     #> b_treat          -0.180738   0.078174 -2.31201  0.024113 *   #> b_dayscorab       0.524761   0.029423 17.83478 < 2.2e-16 *** #> miss_b_dayscorab  0.603928   0.264174  2.28610  0.025678 *   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> RMSE: 1.91167     Adj. R2: 0.282038 #>                 Within R2: 0.266002  # Run RI on the 'b_treat' variable, specifying the strata and clusters. co_ri = ritest(co_est, 'b_treat', strata='b_pair', cluster='b_block',                reps=1e3, seed=123L) co_ri #>  #>           Call: feols(fml = dayscorab ~ b_treat + b_dayscorab + miss_b_dayscorab | b_pair + round2 + round3, data = colombia, vcov = ~b_block) #>    Res. var(s): b_treat #>             H0: b_treat=0 #>  Strata var(s): b_pair #>         Strata: 31 #> Cluster var(s): b_block #>       Clusters: 63 #>      Num. reps: 1000 #> ────────────────────────────────────────────────────────────────────────────────  #>   T(obs)         c         n     p=c/n     SE(p)   CI 2.5%  CI 97.5%   #>  -0.1807       110      1000      0.11   0.01628   0.08322    0.1368   #> ────────────────────────────────────────────────────────────────────────────────  #> Note: Confidence interval is with respect to p=c/n.  #> Note: c = #{|T| >= |T(obs)|}  #>  plot(co_ri, type = 'hist', highlight = 'fill')   # This time, the RI rejection rate (0.11) is noticeably higher than the # parametric p-value (0.024) from the regression model."},{"path":"http://grantmcdermott.com/ritest/reference/tidy.ritest.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy an `ritest` object — tidy.ritest","title":"Tidy an `ritest` object — tidy.ritest","text":"Tidy `ritest` object","code":""},{"path":"http://grantmcdermott.com/ritest/reference/tidy.ritest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tidy an `ritest` object — tidy.ritest","text":"","code":"# S3 method for ritest tidy(x, conf.int = TRUE, ...)"},{"path":"http://grantmcdermott.com/ritest/reference/tidy.ritest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tidy an `ritest` object — tidy.ritest","text":"x object produced `ritest` function. conf.int Logical indicating whether include confidence interval. ... Additional arguments. Currently ignored.","code":""},{"path":"http://grantmcdermott.com/ritest/reference/tidy.ritest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tidy an `ritest` object — tidy.ritest","text":"data frame summary statistics conforms `broom`   package specifications.","code":""},{"path":"http://grantmcdermott.com/ritest/reference/tidy.ritest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tidy an `ritest` object — tidy.ritest","text":"","code":"est = lm(yield ~ N + P + K, data = npk) est_ri = ritest(est, 'N', reps = 1e3, seed = 1234L, pcores = 2L) tidy(est_ri) #>   term estimate   std.error p.value    conf.low  conf.high #> 1   N1 5.616667 0.007461833   0.021 0.008726377 0.03327362 glance(est_ri) #>     H0 Num.Reps #> 1 N1=0     1000"},{"path":"http://grantmcdermott.com/ritest/news/index.html","id":"ritest-010-in-development","dir":"Changelog","previous_headings":"","what":"ritest 0.1.0 (in development)","title":"ritest 0.1.0 (in development)","text":"Add pkgdown site: http://grantmcdermott.com/ritest Add tidiers compatability broom. Bundle support different null hypotheses part resampvar string argument (replaces extends previous pvals h0 arguments).","code":""},{"path":"http://grantmcdermott.com/ritest/news/index.html","id":"ritest-001","dir":"Changelog","previous_headings":"","what":"ritest 0.0.1","title":"ritest 0.0.1","text":"Initial GitHub release.","code":""}]
